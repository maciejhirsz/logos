---
source: logos-codegen/tests/codegen.rs
expression: generated
---
impl < 's > :: logos :: Logos < 's > for Token { type Error = &'static str ; type Extras = Vec <&'static str > ; type Source = str ; fn lex (lex : & mut :: logos :: Lexer < 's , Self >) -> std :: option :: Option < std :: result :: Result < Self , Self :: Error >> { use :: logos :: internal :: { LexerInternal , CallbackRetVal , CallbackResult , SkipRetVal , SkipResult , } ; use :: logos :: Logos ; type Error = &'static str ; type Lexer < 's > = :: logos :: Lexer < 's , Token > ; # [inline] fn make_error < 's > (lex : & mut Lexer < 's >) -> < Token as Logos < 's >> :: Error { < Token as Logos > :: Error :: default () } # [derive (Clone , Copy)] enum LogosState { State1024Ctx5 , State1536Ctx4 , State2048Ctx3 , State2560Ctx2 , State3072Ctx1 , State3584Ctx0 , State4096 , State4608 , State5120 , State5632 , State6144 , State6656 , State7168 } const START : LogosState = LogosState :: State4096 ; let mut state = START ; let mut offset = lex . offset () ; loop { match state { LogosState :: State1024Ctx5 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { other => { let action = SkipRetVal :: < 's , Self > :: construct (labelled_skip_result_callback (lex)) ; match action { SkipResult :: Skip => { lex . trivia () ; offset = lex . offset () ; state = START ; } , SkipResult :: Error (err) => { return Some (Err (err)) ; } , } } } } LogosState :: State1536Ctx4 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { other => { let action = SkipRetVal :: < 's , Self > :: construct (labelled_result_callback (lex)) ; match action { SkipResult :: Skip => { lex . trivia () ; offset = lex . offset () ; state = START ; } , SkipResult :: Error (err) => { return Some (Err (err)) ; } , } } } } LogosState :: State2048Ctx3 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { other => { let action = SkipRetVal :: < 's , Self > :: construct (labelled_skip_callback (lex)) ; match action { SkipResult :: Skip => { lex . trivia () ; offset = lex . offset () ; state = START ; } , SkipResult :: Error (err) => { return Some (Err (err)) ; } , } } } } LogosState :: State2560Ctx2 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { other => { let action = SkipRetVal :: < 's , Self > :: construct (labelled_callback (lex)) ; match action { SkipResult :: Skip => { lex . trivia () ; offset = lex . offset () ; state = START ; } , SkipResult :: Error (err) => { return Some (Err (err)) ; } , } } } } LogosState :: State3072Ctx1 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { other => { # [inline] fn callback < 's > (lex : & mut Lexer < 's >) -> impl SkipRetVal < 's , Token > + use < 's > { lex . extras . push ("inline_callback") } let action = SkipRetVal :: < 's , Self > :: construct (callback (lex)) ; match action { SkipResult :: Skip => { lex . trivia () ; offset = lex . offset () ; state = START ; } , SkipResult :: Error (err) => { return Some (Err (err)) ; } , } } } } LogosState :: State3584Ctx0 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { other => { lex . trivia () ; offset = lex . offset () ; state = START ; } } } LogosState :: State4096 => { match lex . read :: < u8 > (offset) { Some (b'a') => { offset += 1 ; state = LogosState :: State5120 ; } , Some (b'b') => { offset += 1 ; state = LogosState :: State5632 ; } , Some (b'c') => { offset += 1 ; state = LogosState :: State6144 ; } , Some (b'd') => { offset += 1 ; state = LogosState :: State6656 ; } , Some (b'e' ..= b'f') => { offset += 1 ; state = LogosState :: State7168 ; } , Some (b'g' ..= b'h') => { offset += 1 ; state = LogosState :: State4608 ; } , None => return None , other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State4608 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State1024Ctx5 ; } , None => { offset += 1 ; state = LogosState :: State1024Ctx5 ; } other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State5120 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State3584Ctx0 ; } , None => { offset += 1 ; state = LogosState :: State3584Ctx0 ; } other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State5632 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State3072Ctx1 ; } , None => { offset += 1 ; state = LogosState :: State3072Ctx1 ; } other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State6144 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State2560Ctx2 ; } , None => { offset += 1 ; state = LogosState :: State2560Ctx2 ; } other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State6656 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State2048Ctx3 ; } , None => { offset += 1 ; state = LogosState :: State2048Ctx3 ; } other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State7168 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State1536Ctx4 ; } , None => { offset += 1 ; state = LogosState :: State1536Ctx4 ; } other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } } } } }

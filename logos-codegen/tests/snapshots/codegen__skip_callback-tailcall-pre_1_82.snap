---
source: logos-codegen/tests/codegen.rs
expression: formatted
---
impl<'s> ::logos::Logos<'s> for Token {
    type Error = &'static str;
    type Extras = Vec<&'static str>;
    type Source = str;
    fn lex(
        lex: &mut ::logos::Lexer<'s, Self>,
    ) -> std::option::Option<std::result::Result<Self, Self::Error>> {
        use ::logos::internal::{
            LexerInternal, CallbackRetVal, CallbackResult, SkipRetVal, SkipResult,
        };
        use std::result::Result as _Result;
        use std::option::Option as _Option;
        use ::logos::Logos;
        type _Lexer<'s> = ::logos::Lexer<'s, Token>;
        #[inline]
        fn make_error<'s>(lex: &mut _Lexer<'s>) -> <Token as Logos<'s>>::Error {
            <Token as Logos<'s>>::Error::default()
        }
        fn state1024_ctx5<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            lex.end(offset - 1);
            match lex.read::<u8>(offset) {
                other => {
                    let action = SkipRetVal::<
                        's,
                        Token,
                    >::construct(labelled_skip_result_callback(lex));
                    match action {
                        SkipResult::Skip => {
                            lex.trivia();
                            offset = lex.offset();
                            return state4096(lex, offset);
                        }
                        SkipResult::Error(err) => {
                            return Some(Err(err));
                        }
                    }
                }
            }
        }
        fn state1536_ctx4<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            lex.end(offset - 1);
            match lex.read::<u8>(offset) {
                other => {
                    let action = SkipRetVal::<
                        's,
                        Token,
                    >::construct(labelled_result_callback(lex));
                    match action {
                        SkipResult::Skip => {
                            lex.trivia();
                            offset = lex.offset();
                            return state4096(lex, offset);
                        }
                        SkipResult::Error(err) => {
                            return Some(Err(err));
                        }
                    }
                }
            }
        }
        fn state2048_ctx3<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            lex.end(offset - 1);
            match lex.read::<u8>(offset) {
                other => {
                    let action = SkipRetVal::<
                        's,
                        Token,
                    >::construct(labelled_skip_callback(lex));
                    match action {
                        SkipResult::Skip => {
                            lex.trivia();
                            offset = lex.offset();
                            return state4096(lex, offset);
                        }
                        SkipResult::Error(err) => {
                            return Some(Err(err));
                        }
                    }
                }
            }
        }
        fn state2560_ctx2<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            lex.end(offset - 1);
            match lex.read::<u8>(offset) {
                other => {
                    let action = SkipRetVal::<
                        's,
                        Token,
                    >::construct(labelled_callback(lex));
                    match action {
                        SkipResult::Skip => {
                            lex.trivia();
                            offset = lex.offset();
                            return state4096(lex, offset);
                        }
                        SkipResult::Error(err) => {
                            return Some(Err(err));
                        }
                    }
                }
            }
        }
        fn state3072_ctx1<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            lex.end(offset - 1);
            match lex.read::<u8>(offset) {
                other => {
                    #[inline]
                    fn callback<'s>(lex: &mut _Lexer<'s>) -> impl SkipRetVal<'s, Token> {
                        lex.extras.push("inline_callback")
                    }
                    let action = SkipRetVal::<'s, Token>::construct(callback(lex));
                    match action {
                        SkipResult::Skip => {
                            lex.trivia();
                            offset = lex.offset();
                            return state4096(lex, offset);
                        }
                        SkipResult::Error(err) => {
                            return Some(Err(err));
                        }
                    }
                }
            }
        }
        fn state3584_ctx0<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            lex.end(offset - 1);
            match lex.read::<u8>(offset) {
                other => {
                    lex.trivia();
                    offset = lex.offset();
                    return state4096(lex, offset);
                }
            }
        }
        fn state4096<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(b'a') => {
                    offset += 1;
                    return state5120(lex, offset);
                }
                Some(b'b') => {
                    offset += 1;
                    return state5632(lex, offset);
                }
                Some(b'c') => {
                    offset += 1;
                    return state6144(lex, offset);
                }
                Some(b'd') => {
                    offset += 1;
                    return state6656(lex, offset);
                }
                Some(b'e'..=b'f') => {
                    offset += 1;
                    return state7168(lex, offset);
                }
                Some(b'g'..=b'h') => {
                    offset += 1;
                    return state4608(lex, offset);
                }
                None if lex.offset() == offset => return None,
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(make_error(lex)));
                }
            }
        }
        fn state4608<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(0u8..=255u8) => {
                    offset += 1;
                    return state1024_ctx5(lex, offset);
                }
                None => {
                    offset += 1;
                    return state1024_ctx5(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(make_error(lex)));
                }
            }
        }
        fn state5120<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(0u8..=255u8) => {
                    offset += 1;
                    return state3584_ctx0(lex, offset);
                }
                None => {
                    offset += 1;
                    return state3584_ctx0(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(make_error(lex)));
                }
            }
        }
        fn state5632<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(0u8..=255u8) => {
                    offset += 1;
                    return state3072_ctx1(lex, offset);
                }
                None => {
                    offset += 1;
                    return state3072_ctx1(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(make_error(lex)));
                }
            }
        }
        fn state6144<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(0u8..=255u8) => {
                    offset += 1;
                    return state2560_ctx2(lex, offset);
                }
                None => {
                    offset += 1;
                    return state2560_ctx2(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(make_error(lex)));
                }
            }
        }
        fn state6656<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(0u8..=255u8) => {
                    offset += 1;
                    return state2048_ctx3(lex, offset);
                }
                None => {
                    offset += 1;
                    return state2048_ctx3(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(make_error(lex)));
                }
            }
        }
        fn state7168<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(0u8..=255u8) => {
                    offset += 1;
                    return state1536_ctx4(lex, offset);
                }
                None => {
                    offset += 1;
                    return state1536_ctx4(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(make_error(lex)));
                }
            }
        }
        state4096(lex, lex.offset())
    }
}

---
source: logos-codegen/tests/codegen.rs
expression: formatted
---
impl<'s> ::logos::Logos<'s> for Token {
    type Error = ();
    type Extras = ();
    type Source = str;
    fn lex(
        lex: &mut ::logos::Lexer<'s, Self>,
    ) -> std::option::Option<std::result::Result<Self, Self::Error>> {
        use ::logos::internal::{
            LexerInternal, CallbackRetVal, CallbackResult, SkipRetVal, SkipResult,
        };
        use std::result::Result as _Result;
        use std::option::Option as _Option;
        use ::logos::Logos;
        type _Lexer<'s> = ::logos::Lexer<'s, Token>;
        #[inline]
        fn _make_error<'s>(lex: &mut _Lexer<'s>) -> <Token as Logos<'s>>::Error {
            <Token as Logos<'s>>::Error::default()
        }
        fn state1024_ctx0<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            lex.end(offset - 1);
            match lex.read::<u8>(offset) {
                other => {
                    return Some(Ok(Token::Letter));
                }
            }
        }
        fn state1536<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(b'a') => {
                    offset += 1;
                    return state3072(lex, offset);
                }
                None if lex.offset() == offset => return None,
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(_make_error(lex)));
                }
            }
        }
        fn state2048<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(b'z') => {
                    offset += 1;
                    return state2560(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(_make_error(lex)));
                }
            }
        }
        fn state2560<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(0u8..=255u8) => {
                    offset += 1;
                    return state1024_ctx0(lex, offset);
                }
                None => {
                    offset += 1;
                    return state1024_ctx0(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(_make_error(lex)));
                }
            }
        }
        fn state3072<'s>(
            lex: &mut _Lexer<'s>,
            mut offset: usize,
        ) -> _Option<_Result<Token, <Token as Logos<'s>>::Error>> {
            match lex.read::<u8>(offset) {
                Some(b'-') => {
                    offset += 1;
                    return state2048(lex, offset);
                }
                other => {
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(_make_error(lex)));
                }
            }
        }
        state1536(lex, lex.offset())
    }
}

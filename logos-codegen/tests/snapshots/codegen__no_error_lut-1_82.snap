---
source: logos-codegen/tests/codegen.rs
expression: generated
---
impl < 's > :: logos :: Logos < 's > for Token { type Error = () ; type Extras = () ; type Source = [u8] ; fn lex (lex : & mut :: logos :: Lexer < 's , Self >) -> Option < Result < Self , Self :: Error >> { use :: logos :: internal :: { LexerInternal , CallbackRetVal , CallbackResult , SkipRetVal , SkipResult , } ; use :: logos :: Logos ; type Lexer < 's > = :: logos :: Lexer < 's , Token > ; # [derive (Clone , Copy)] enum LogosState { State1024Ctx0 , State1536Ctx1 , State2048 , State2560 , State3072 , State3584 , State4096 , State4608 , State5120 , State5632 , State6144 , State6656 } const START : LogosState = LogosState :: State2048 ; let mut state = START ; let mut offset = lex . offset () ; loop { match state { LogosState :: State1024Ctx0 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { _ => { return Some (Ok (Token :: Newline)) ; } } } LogosState :: State1536Ctx1 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { _ => { return Some (Ok (Token :: AnyUnicode)) ; } } } LogosState :: State2048 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 9u8) | Some (11u8 ..= 127u8) => { offset += 1 ; state = LogosState :: State6656 ; } , Some (10u8) => { offset += 1 ; state = LogosState :: State6144 ; } , Some (194u8 ..= 223u8) => { offset += 1 ; state = LogosState :: State2560 ; } , Some (224u8) => { offset += 1 ; state = LogosState :: State3072 ; } , Some (225u8 ..= 236u8) | Some (238u8 ..= 239u8) => { offset += 1 ; state = LogosState :: State3584 ; } , Some (237u8) => { offset += 1 ; state = LogosState :: State4096 ; } , Some (240u8) => { offset += 1 ; state = LogosState :: State4608 ; } , Some (241u8 ..= 243u8) => { offset += 1 ; state = LogosState :: State5120 ; } , Some (244u8) => { offset += 1 ; state = LogosState :: State5632 ; } , None => return None , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State2560 => { match lex . read :: < u8 > (offset) { Some (128u8 ..= 191u8) => { offset += 1 ; state = LogosState :: State6656 ; } , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State3072 => { match lex . read :: < u8 > (offset) { Some (160u8 ..= 191u8) => { offset += 1 ; state = LogosState :: State2560 ; } , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State3584 => { match lex . read :: < u8 > (offset) { Some (128u8 ..= 191u8) => { offset += 1 ; state = LogosState :: State2560 ; } , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State4096 => { match lex . read :: < u8 > (offset) { Some (128u8 ..= 159u8) => { offset += 1 ; state = LogosState :: State2560 ; } , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State4608 => { match lex . read :: < u8 > (offset) { Some (144u8 ..= 191u8) => { offset += 1 ; state = LogosState :: State3584 ; } , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State5120 => { match lex . read :: < u8 > (offset) { Some (128u8 ..= 191u8) => { offset += 1 ; state = LogosState :: State3584 ; } , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State5632 => { match lex . read :: < u8 > (offset) { Some (128u8 ..= 143u8) => { offset += 1 ; state = LogosState :: State3584 ; } , _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State6144 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State1024Ctx0 ; } , None => { offset += 1 ; state = LogosState :: State1024Ctx0 ; } _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } LogosState :: State6656 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State1536Ctx1 ; } , None => { offset += 1 ; state = LogosState :: State1536Ctx1 ; } _ => { lex . end_to_boundary (offset + 1) ; return Some (Err (Self :: Error :: default ())) ; } } } } } } }

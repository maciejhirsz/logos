---
source: logos-codegen/tests/codegen.rs
expression: generated
---
impl < 's > :: logos :: Logos < 's > for Token { type Error = () ; type Extras = () ; type Source = str ; fn lex (lex : & mut :: logos :: Lexer < 's , Self >) -> std :: option :: Option < std :: result :: Result < Self , Self :: Error >> { use :: logos :: internal :: { LexerInternal , CallbackRetVal , CallbackResult , SkipRetVal , SkipResult , } ; use :: logos :: Logos ; type Error = () ; type Lexer < 's > = :: logos :: Lexer < 's , Token > ; # [inline] fn make_error < 's > (lex : & mut Lexer < 's >) -> < Token as Logos < 's >> :: Error { < Token as Logos > :: Error :: default () } # [derive (Clone , Copy)] enum LogosState { State1024Ctx0 , State1536 , State2048 , State2560 , State3072 } const START : LogosState = LogosState :: State1536 ; let mut state = START ; let mut offset = lex . offset () ; loop { match state { LogosState :: State1024Ctx0 => { lex . end (offset - 1) ; match lex . read :: < u8 > (offset) { other => { return Some (Ok (Token :: Letter)) ; } } } LogosState :: State1536 => { match lex . read :: < u8 > (offset) { Some (b'a') => { offset += 1 ; state = LogosState :: State3072 ; } , None => return None , other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State2048 => { match lex . read :: < u8 > (offset) { Some (b'z') => { offset += 1 ; state = LogosState :: State2560 ; } , other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State2560 => { match lex . read :: < u8 > (offset) { Some (0u8 ..= 255u8) => { offset += 1 ; state = LogosState :: State1024Ctx0 ; } , None => { offset += 1 ; state = LogosState :: State1024Ctx0 ; } other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } LogosState :: State3072 => { match lex . read :: < u8 > (offset) { Some (b'-') => { offset += 1 ; state = LogosState :: State2048 ; } , other => { lex . end_to_boundary (offset + if other . is_some () { 1 } else { 0 }) ; return Some (Err (make_error (lex))) ; } } } } } } }

---
source: logos-codegen/tests/codegen.rs
expression: formatted
---
impl<'s> ::logos::Logos<'s> for Token {
    type Error = &'static str;
    type Extras = Vec<&'static str>;
    type Source = str;
    fn lex(
        lex: &mut ::logos::Lexer<'s, Self>,
    ) -> std::option::Option<std::result::Result<Self, Self::Error>> {
        use ::logos::internal::{
            LexerInternal, CallbackRetVal, CallbackResult, SkipRetVal, SkipResult,
        };
        use std::result::Result as _Result;
        use std::option::Option as _Option;
        use ::logos::Logos;
        type _Lexer<'s> = ::logos::Lexer<'s, Token>;
        #[derive(Clone, Copy)]
        enum LogosState {
            state1024_ctx5,
            state1536_ctx4,
            state2048_ctx3,
            state2560_ctx2,
            state3072_ctx1,
            state3584_ctx0,
            state4096,
            state4608,
            state5120,
            state5632,
            state6144,
            state6656,
            state7168,
        }
        #[inline]
        fn _make_error<'s>(lex: &mut _Lexer<'s>) -> <Token as Logos<'s>>::Error {
            <Token as Logos<'s>>::Error::default()
        }
        let mut state = LogosState::state4096;
        let mut offset = lex.offset();
        loop {
            match state {
                LogosState::state1024_ctx5 => {
                    lex.end(offset - 1);
                    match lex.read::<u8>(offset) {
                        other => {
                            if other.is_none() {}
                            let action = SkipRetVal::<
                                's,
                                Token,
                            >::construct(labelled_skip_result_callback(lex));
                            match action {
                                SkipResult::Skip => {
                                    lex.trivia();
                                    offset = lex.offset();
                                    state = LogosState::state4096;
                                }
                                SkipResult::Error(err) => {
                                    return Some(Err(err));
                                }
                            }
                        }
                    }
                }
                LogosState::state1536_ctx4 => {
                    lex.end(offset - 1);
                    match lex.read::<u8>(offset) {
                        other => {
                            if other.is_none() {}
                            let action = SkipRetVal::<
                                's,
                                Token,
                            >::construct(labelled_result_callback(lex));
                            match action {
                                SkipResult::Skip => {
                                    lex.trivia();
                                    offset = lex.offset();
                                    state = LogosState::state4096;
                                }
                                SkipResult::Error(err) => {
                                    return Some(Err(err));
                                }
                            }
                        }
                    }
                }
                LogosState::state2048_ctx3 => {
                    lex.end(offset - 1);
                    match lex.read::<u8>(offset) {
                        other => {
                            if other.is_none() {}
                            let action = SkipRetVal::<
                                's,
                                Token,
                            >::construct(labelled_skip_callback(lex));
                            match action {
                                SkipResult::Skip => {
                                    lex.trivia();
                                    offset = lex.offset();
                                    state = LogosState::state4096;
                                }
                                SkipResult::Error(err) => {
                                    return Some(Err(err));
                                }
                            }
                        }
                    }
                }
                LogosState::state2560_ctx2 => {
                    lex.end(offset - 1);
                    match lex.read::<u8>(offset) {
                        other => {
                            if other.is_none() {}
                            let action = SkipRetVal::<
                                's,
                                Token,
                            >::construct(labelled_callback(lex));
                            match action {
                                SkipResult::Skip => {
                                    lex.trivia();
                                    offset = lex.offset();
                                    state = LogosState::state4096;
                                }
                                SkipResult::Error(err) => {
                                    return Some(Err(err));
                                }
                            }
                        }
                    }
                }
                LogosState::state3072_ctx1 => {
                    lex.end(offset - 1);
                    match lex.read::<u8>(offset) {
                        other => {
                            if other.is_none() {}
                            #[inline]
                            fn callback<'s>(
                                lex: &mut _Lexer<'s>,
                            ) -> impl SkipRetVal<'s, Token> + use<'s> {
                                lex.extras.push("inline_callback")
                            }
                            let action = SkipRetVal::<
                                's,
                                Token,
                            >::construct(callback(lex));
                            match action {
                                SkipResult::Skip => {
                                    lex.trivia();
                                    offset = lex.offset();
                                    state = LogosState::state4096;
                                }
                                SkipResult::Error(err) => {
                                    return Some(Err(err));
                                }
                            }
                        }
                    }
                }
                LogosState::state3584_ctx0 => {
                    lex.end(offset - 1);
                    match lex.read::<u8>(offset) {
                        other => {
                            if other.is_none() {}
                            lex.trivia();
                            offset = lex.offset();
                            state = LogosState::state4096;
                        }
                    }
                }
                LogosState::state4096 => {
                    let other = lex.read::<u8>(offset);
                    if let Some(byte) = other {
                        const TABLE: [_Option<LogosState>; 256] = [
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            Some(LogosState::state5120),
                            Some(LogosState::state5632),
                            Some(LogosState::state6144),
                            Some(LogosState::state6656),
                            Some(LogosState::state7168),
                            Some(LogosState::state7168),
                            Some(LogosState::state4608),
                            Some(LogosState::state4608),
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                            None,
                        ];
                        let next_state = TABLE[byte as usize];
                        if let Some(next_state) = next_state {
                            offset += 1;
                            state = next_state;
                            continue;
                        }
                    } else {
                        if lex.offset() == offset {
                            return None;
                        }
                    }
                    lex.end_to_boundary(offset + if other.is_some() { 1 } else { 0 });
                    return Some(Err(_make_error(lex)));
                }
                LogosState::state4608 => {
                    match lex.read::<u8>(offset) {
                        Some(0u8..=255u8) => {
                            offset += 1;
                            state = LogosState::state1024_ctx5;
                            continue;
                        }
                        other => {
                            if other.is_none() {
                                offset += 1;
                                state = LogosState::state1024_ctx5;
                                continue;
                            }
                            lex.end_to_boundary(
                                offset + if other.is_some() { 1 } else { 0 },
                            );
                            return Some(Err(_make_error(lex)));
                        }
                    }
                }
                LogosState::state5120 => {
                    match lex.read::<u8>(offset) {
                        Some(0u8..=255u8) => {
                            offset += 1;
                            state = LogosState::state3584_ctx0;
                            continue;
                        }
                        other => {
                            if other.is_none() {
                                offset += 1;
                                state = LogosState::state3584_ctx0;
                                continue;
                            }
                            lex.end_to_boundary(
                                offset + if other.is_some() { 1 } else { 0 },
                            );
                            return Some(Err(_make_error(lex)));
                        }
                    }
                }
                LogosState::state5632 => {
                    match lex.read::<u8>(offset) {
                        Some(0u8..=255u8) => {
                            offset += 1;
                            state = LogosState::state3072_ctx1;
                            continue;
                        }
                        other => {
                            if other.is_none() {
                                offset += 1;
                                state = LogosState::state3072_ctx1;
                                continue;
                            }
                            lex.end_to_boundary(
                                offset + if other.is_some() { 1 } else { 0 },
                            );
                            return Some(Err(_make_error(lex)));
                        }
                    }
                }
                LogosState::state6144 => {
                    match lex.read::<u8>(offset) {
                        Some(0u8..=255u8) => {
                            offset += 1;
                            state = LogosState::state2560_ctx2;
                            continue;
                        }
                        other => {
                            if other.is_none() {
                                offset += 1;
                                state = LogosState::state2560_ctx2;
                                continue;
                            }
                            lex.end_to_boundary(
                                offset + if other.is_some() { 1 } else { 0 },
                            );
                            return Some(Err(_make_error(lex)));
                        }
                    }
                }
                LogosState::state6656 => {
                    match lex.read::<u8>(offset) {
                        Some(0u8..=255u8) => {
                            offset += 1;
                            state = LogosState::state2048_ctx3;
                            continue;
                        }
                        other => {
                            if other.is_none() {
                                offset += 1;
                                state = LogosState::state2048_ctx3;
                                continue;
                            }
                            lex.end_to_boundary(
                                offset + if other.is_some() { 1 } else { 0 },
                            );
                            return Some(Err(_make_error(lex)));
                        }
                    }
                }
                LogosState::state7168 => {
                    match lex.read::<u8>(offset) {
                        Some(0u8..=255u8) => {
                            offset += 1;
                            state = LogosState::state1536_ctx4;
                            continue;
                        }
                        other => {
                            if other.is_none() {
                                offset += 1;
                                state = LogosState::state1536_ctx4;
                                continue;
                            }
                            lex.end_to_boundary(
                                offset + if other.is_some() { 1 } else { 0 },
                            );
                            return Some(Err(_make_error(lex)));
                        }
                    }
                }
            }
        }
    }
}
